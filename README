Advika Deodhar 6pm Lab 

--------------------------------------------------------------------------------------------------------------


NEEED TO IMPLEMENT STILL:
6) If the sender is not able to open the from-file, rcopy should print out the error message: Error: file <fromfilename> not found. rcopy should then exit.
7) If the receiver cannot open the to-file, rcopy should print out the error message: Error on open of output
file: <to-filename>. 




Readmeeee again woooooo!!! Time to read the spec

Writing two programs, RCOPY and SERVER

RCOPY: 
- takes in a src filename, dest filename, window size, buffer size, error-rate, remote-machine, remote-port.  
- window size = how many packets in the window
- buffer size = number of bytes to read from disk and send in each packet
- error-rate = percent of packets that are in error (I DONT GET THIS)
- remote-machine = the machine that runs the server
- remote-port = server port number
- if it cant open the dest file print out error
- you ask the server if it has the src filename
- if it does, the server will send that file to the client 
- the client will downlaod info from the source and print that out to the dest file
- will need to create an application PDU and send the data in chunks 

SERVER:
- takes in the window-size, buffer-size, and filename from rcopy (make a struct?)
- the server takes in an optional port number to use (if not given, use 0 to pass to bind())
- can only terminate with ^c
- should process multiple clients at the same time (need to do threading??)
- if there is an error opening the file, send an error packet back to the client
- 

ERRORS:
- for error checking use the sendToErr() function

WINDOW:
- need a separate library for the windowing window.c window.h
- can only use 5 global variables in this, and those can't be used anywhere else 
- both the server and client use this structure 
    - the server will use it to keep track of what packets have been sent but not acknowledged yet
    - the client uses it to keep track of packets that come in out of order (it will reorder before printing to output file)
- make this by mallocking for an array (make sure you free and valgrind to check)
- make it a circular buffer
- must only edit the buffer through the windowing library functions I write (cant access ideces directly)

SELECTIVE REJECT:
- this protocol works by only resending the packet that went missing
- if a packet is missing, client sends SREJ message to server
- server resends the missing packet
- client sends a RR to say that it is ready to continue receiving

UDP CONNECTION:


FILENAME EXCHANGE RCOPY: 

- Send file state: 
    - create a socket to send on 
    - make the filename sending PDU (4 byte sequence number)(2 byte checksum)(1 byte flag)(1400 byte payload)
    - choosing arbitrarily to have it be filename, buffer-size, then window-size
        - need to calculate the checksum
            - zero it out upon construction
            - call checksum on whole packet
            - memcpy the packet back out 
        - sequence number is in network order (choose some value?)
        - flag = 8 
        - verify that the packet is being created properly
    - use sendToErr() to send this packet
    - if the timer expires or data is received, then stay in this state 
        - close the socket
        - open a new socket
        - send filename on the new scoket 
        - increment the counter
        - re-start the poll(1) CLARIFY
    - if time expires and count is greater than 9
        - move to DONE state
    - if bad file is received 
        - move to DONE state
    - if file is OK
        - move to fileOK state

- File Ok State:
    - open the output file
    - if opening output file fails move to DONE state
    - if it works then move to the RECVDATA state

- DONE State:
    - print out an error and terminate process

- RECEIVE Data State: 
    - do nothing here for now, will implement this when we get into the sliding window? 
    - need to do sliding window for client and server?

FILENAME EXCHANGE SERVER:
- GET FILENAME State:
    - fork off a child server process and pass it the info of the client
    - get the filename packet
        - get the client port number and IP address from doing the recvFrom
    - open the file
    - close the main server socket
    - if opening the file doest work, move to DONE state
    - if the file is ok, open a new socket and send a filename ack packet and move to SEND DATA state
- DONE State:
    - terminate the server (no printing of error)
- SEND DATA State:
    - send the data packet
    - set count to 0
    - call poll
    - move to WAIT ON ACK state
    - if the EOF flag is read set the counter to 0 and move to the WAIT ON EOF ack
- WAIT ON ACK State:
    - if it times out, and the count is > 9 move to the done state 
    - if the timer goes out and the count is < 9 resend the data, count ++, poll
    - if ack is recieved, move back to the SEND DATA state to send the next packet
- WAIT ON EOF ACK: 
    - if the timer expires, resend the EOF packet, count++ and restart the poll
    - if the timer expires and the count > 9, close the file, close the socket, and move to the DONE state
    - if the EOF ack is received, close the file and close the socket and move to DONE state


SERVER AGAIN:
- Main:
    - wait for the filename request
    - recvFrom the pdu
    - extract the filename, the window size and buffer size 
    - calculate the checksum (if bad then keep waiting for packet)
    - pass the client info to the get filename state 
- FSM: 
- GET_FILENAME:
    - fork off a server child
        - immedately send a hello talk to here packet to the client (flag = 33) 
    - parent goes back to waiting for new clients
    - child process will try and open the filename
    - if it works, then calcualte the right valid ack packet and send that back to client 
        - move to SEND_DATA state
    - if it doesnt work then send the error packet back
        - move to the DONE state
    - thats it for now, the rest of the states will be implemented with sliding window



    couple issues:
    - the filename is not being read out right
    - moving to the DONE state and ending is not happening it keeps going back up to the top of something and continuing 
    
    Windowing:
    - window size (W) = how many unacknowledged frams we can have (how big the buffer is on the sender)
    - lower edge (L) = the lowest edge that has not been acknowledged
    - upper edge (U) = one higher than the highest frame you can send 
    - current = the frame I am sending 

    - when current = upper, the window is closed
    - when this happens, stop sending until an RR arrives
    - when the RR arrives, L = RR number and U = L + window size
    - window buffer must be implemneted as a 2D array on rcopy and server
    - the window buffer can't be bigger than the window size 
    - malloc() for them at the start of the file transfer
    - must be implemented as a circular queue that is indexed by sequence number
    - the window index = sequence number % window size
    - on the server, cerate this buffer only after forking a child 
    - on the sender, this is used for windowing
    - on the reciever its just a buffer to store data when packets are lost 
    - all accessor functions must be defined in separate c file
    - can only have a max of 5 global variables in these windowing files
    - those global variables cannot be accessed by the server or rcopy programs
    - 

    - isn't the max packet size 1407 according to the spec or is packet size something different
    - also shouldnt the max window size be adjusted based on the command line arguments
    - so the window initializing function should be passed in the window size and the buffer size because the server and client both know that beforehand? 
    - can each slot in the buffer only hold one packet? 
    - can I implement 2D arrays as structs? how are 2D arrays implemented in C?
    - would I ever need a helper function to remove a packet from the window? 
    - in the init function wouldnt I have to malloc for my 2D array?
    - why would inserting it in the window mean I have to memcpy isnt it a regular array?
    - for moving the window forward, dont I have to reset the lower edge to the RR then make the upper edge L + window size?
    - 


    WINDOWING CASES TO TEST FOR:
    - window size is 3, 

ON DA SERVER:
- while (window is open) and not EOF
    - open the file and read that
    - create the PDU (add on the header)
    - add it to the windowing buffer 
    - send the data
    - while Poll(0) (so poll indefinitely) (so basically while there is data to process)
        - process the RR or the SREJ
- while window is closed and not EOF 
    - if poll (1 second) == true (if it doesnt time out)
        - process the SREJ or RR
    - else 
        - resend lowest packet 

(window closed):
- when current = upper
- this means that the window is full and it can't move forward until it gets an RR
- the RR frees up space in the window and move both lower and current 



RCOPY DATA GETTING STATE MACHINE:
3 states:

IN ORDER: 
- when the receiver gets the correct in order packets
- stays in this state until a packet greater than expected arrives
- highest counter = expected packet
- each time you receive you do expected ++
- then send an RR packet back to the sender for the expected 
- move to buffering state if recieved > expected 
    - need to send a SREJ packet for the expected
    - buffer the PDU that you receive 
    - set the highest = last received sequence number

BUFFERING:
- go here when the packet received is greater than the expected packet
- stay here while I receive > expected 
- keep buffering what you receive 
- highest = received 
- highest indcates what is the largest thing in the buffer
- receive expected and move to flushing state

FLUSHING:
- when you receive the expected packet
- write that one to disc
- increment expected
- flush the buffer
- implement as a while loop since it is not event driven like the buffer and in order state
    - while the sequence number = expected
    - check valid flag??
    (program spec says that I need to have a vlaid flag on each packet that goes into the buffer on the receiver)
        - when making the flag initialize them all to have the valid flag off
        - when you start adding data, turn the valid flag on
        - when you get a peice of data, write it to the buffer, and set the valid flag
        - when writing to disc, set the valid flag to 0 to invalidate that entry 
        - for example if your expected is packet 2, and then you get 3 and 4. 
        - 3 and 4 get written to the buffer
        - 5 goes missing, but you get 6 and 7
        - 6 and 7 get written to the buffer
        - then 2 arrives 
        - so now you know you need to trigger the flushing
        - so you write 2 to disc
        - you write 3 and 4 to disc
        - you check that at index 5 the valid flag is not on, which means that there is no packet there
        - so you go back to the buffering state to wait on 5 to get there. 
        - this helps if there are holes in your window
    - write to disc
    - expected ++ 
- when done with flushing, go back to buffering or go to in order
- move out of this state when while loop is over
- go back to the buffering state if expected < highest & packet is not valid in the buffer (valid flag off)
    - send a SREJ for the expected, and RR for the expected
- go back to the in-order state if the buffer is empty (expecetd = highest)
    - increment expected 
    - RR expected 





helper functions to write: 
- receive the packet, take out the header, and write that to disc.
	- take in the entire buffer and the data_size from the command line argument
	- go to the spot in the buffer where the data starts (start of packet + 7 bytes for header)
	- start there and write the remaining data to disc
- function to get the flag of the packet
	- go through the packet until the flag byte (header = 4 byte sequence number, 2 byte checksum, 1 byte flag)
	- return that flag as an int 
- take in the received packet and parse it to remove the sequence number
	- go through the packet until the sequence number bytes (header = 4 byte sequence number, 2 byte checksum, 1 byte flag)
	- so take out the first 4 bytes 
	- return that as a uint32_t
- function to make the RR packet and function to make the SREJ packet
	- Regarding the format for the RR and SREJ packets (it is a normal header created by the sender of the
		RR/SREJ and then the seq number being RRed/SREJed.) This means the application PDU size for a
		RR/SREJ packet is 11 bytes (7 bytes of header + 4 bytes for the sequence number you are
		RR’ing/SREJ’ing). The seq number being RR/SREJ must be in network order.
		 RR PDU format: Packet Seq number, checksum, flag, RR seq number (what you are RRing)2
		 SREJ PDU format: Packet Seq number, checksum, flag, SREJ seq number (what you are SREJing) 
		a. Flag < 32 if not specified in this list cannot be used, if you create your own flag use ≥ 32
b. Flag = 5 RR packet
c. Flag = 6 SREJ packet
d. Flag = 8 Packet contains the file name/buffer-size/window-size (rcopy to server)
e. Flag = 9 Packet contains the response to the filename packet (server to rcopy)
f. Flag = 10 Packet is your EOF indication or is the last data packet (sender to receiver)
g. Flag = 16 Regular data packet


?? what are flag 17 and 18 used for?? ?? where to implement that? done in server (treat them the same as data in receiver)
h. Flag = 17 Resent data packet (after sender receiving a SREJ, not a timeout)
i. Flag = 18 Resent data packet after a timeout (so lowest in window resent data packet.)
j. Flag ≥ 32 If you wish/need to create other flags use ≥ 32 

implement this later within the server
- function to make the data packet
	- what is the best way to do this? 
		- either read through the entire file and make packets for all of them and store that into an array of packet pointers that is as large as the file needs
		- or keep a global pointer to where you are in the file, and each time you need to send another packet, move the pointer data_size forward to make the packet 
		- do this until you reach EOF
	- data packet PDU structure = (header = 4 byte sequence number, 2 byte checksum, 1 byte flag) + data_size amount of data in bytes
		- provided by the command line arguments. ServerParams.data_size

//questions:
- if I make a packet struct like this: 
//Struct for the packet
typedef struct Packet{
    uint32_t sequence_number; 
    uint16_t checksum;
    uint8_t flag;
    uint8_t data[1400]; 
} Packet;
- then I make the incoming packet pointer point to the packet struct would it allow me to use the struct fields? the buffer I make the pointers the same for should have the data starting at those different points
- or would i have to memcpy them into the struct? 








int doGetDataState(int socketNum, struct sockaddr_in6 *server, RcopyParams params){

	// start with the state being in_order
	// move to buffering and flushing within the functions written for each state 
	// open the destination file for writing
	// create the receiver buffer 
	// poll to receive data
	// take out the flag part of the packet 
	// pass entire received packet to the next functions 

	// if receive the EOF, then send the EOF ack
	// then close the file 
	// move to the done state 

	// if poll times out 
	// print an error
	// move to the done state 


	static ReceiveState subState = IN_ORDER;   // or local variable
    int doneReceiving = 0;

    // Possibly create or open your output file here if not already done
    FILE *fp = fopen(params.dest_filename, "ab"); 
    if (!fp) {
        perror("Failed to open output file in GET_DATA");
        return DONE; // or handle error
    }

    // Initialize your ReceiverBuffer (sliding-window buffer) 
    ReceiverBuffer* rbuf = initReceiverBuffer(params.buffer_size, params.window_size);

    while (!doneReceiving) {
        // 1) poll() for the socket
        int pollResult = pollCall(1000); // or your chosen timeout
        if (pollResult > 0) {
            // 2) recvfrom() to get the incoming data packet
            Packet incomingPkt;
            struct sockaddr_in6 fromAddr;
            socklen_t fromLen = sizeof(fromAddr);

            int bytes = recvfrom(socketNum, &incomingPkt, sizeof(incomingPkt), 0,
                                 (struct sockaddr*)&fromAddr, &fromLen);

            if (bytes > 0) {
                // 3) Dispatch to your sub-state handler
                subState = handleDataPacket(rbuf, &incomingPkt, fp, subState);

                // 4) Check if this packet signals EOF or if we otherwise know we’re done
                //    e.g. If your flag=10 indicates last data packet.
                if (/* check if it's EOF or last data packet + fully flushed */) {
                    doneReceiving = 1;
                }

            } else {
                // recvfrom() error or zero => handle or break
            }
        } 
        else {
            // poll timed out => handle timeouts, possibly re-SREJ or re-RR
        }
    }

    // Clean up
    freeReceiverBuffer(rbuf);
    fclose(fp);

    return DONE;  // once you finish, go back to main loop -> transitions to DONE
}

//should take in the incoming packet, the buffer struct, and destination file
int doInOrderState(){
	// set the expected counter at 0
	// parse the received packet 
	// check if the expected packet matches the sequence number of the received packet 
	// call makeRRpacket
	// send the RR packet for the packet just received 
	// increment expected
	// if the received sequence number > expected number, move to buffering state
	// else just stay in this state.
	return BUFFERING;
}

int doBufferState(){
	// while the received sequence number > expected number
	// put the packet into the buffer
	// set the highest variable to the received sequence number
	// will tell you the largest thing in the buffer
	// use that to know what to send an RR for after the buffer is flushed (what is next)
	//  if th received packet sequence number == the expeced number move to the flushing state
	return FLUSHING;
}

int doFlushingState(){
	// write the expected and received packet to disc 
	// increment the expected count 
	// while the sequence number == the expected number 
	// flush out the buffer
	// if flushing ends and the buffer is not empty, return to Buffering State
		// send an RR for the highest # packet before moving to next state
		// send an SREJ for the expected. 
		// flushing will stop when it encounters something that is not valid
	// if flushing ends and the buffer is empty, then more to the in order state again (expected = highest)
		// increment expected
		// RR for the expected
	return BUFFERING;
	return FLUSHING;
}


TODO:
need to change the done state to free the receiver buffer
